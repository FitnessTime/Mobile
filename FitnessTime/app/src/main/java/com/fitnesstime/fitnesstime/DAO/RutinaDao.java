package com.fitnesstime.fitnesstime.DAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.fitnesstime.fitnesstime.Dominio.Rutina;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RUTINA".
*/
public class RutinaDao extends AbstractDao<Rutina, Long> {

    public static final String TABLENAME = "RUTINA";

    /**
     * Properties of entity Rutina.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdUsuario = new Property(1, String.class, "idUsuario", false, "ID_USUARIO");
        public final static Property VersionWeb = new Property(2, Integer.class, "versionWeb", false, "VERSION_WEB");
        public final static Property Version = new Property(3, Integer.class, "version", false, "VERSION");
        public final static Property IdWeb = new Property(4, Long.class, "idWeb", false, "ID_WEB");
        public final static Property EstaSincronizado = new Property(5, boolean.class, "estaSincronizado", false, "ESTA_SINCRONIZADO");
        public final static Property Descripcion = new Property(6, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Aclaracion = new Property(7, String.class, "aclaracion", false, "ACLARACION");
        public final static Property Inicio = new Property(8, String.class, "inicio", false, "INICIO");
        public final static Property Fin = new Property(9, String.class, "fin", false, "FIN");
        public final static Property EsDeCarga = new Property(10, boolean.class, "esDeCarga", false, "ES_DE_CARGA");
    };

    private DaoSession daoSession;


    public RutinaDao(DaoConfig config) {
        super(config);
    }
    
    public RutinaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RUTINA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_USUARIO\" TEXT NOT NULL ," + // 1: idUsuario
                "\"VERSION_WEB\" INTEGER," + // 2: versionWeb
                "\"VERSION\" INTEGER," + // 3: version
                "\"ID_WEB\" INTEGER," + // 4: idWeb
                "\"ESTA_SINCRONIZADO\" INTEGER NOT NULL ," + // 5: estaSincronizado
                "\"DESCRIPCION\" TEXT," + // 6: descripcion
                "\"ACLARACION\" TEXT," + // 7: aclaracion
                "\"INICIO\" TEXT," + // 8: inicio
                "\"FIN\" TEXT," + // 9: fin
                "\"ES_DE_CARGA\" INTEGER NOT NULL );"); // 10: esDeCarga
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RUTINA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Rutina entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdUsuario());
 
        Integer versionWeb = entity.getVersionWeb();
        if (versionWeb != null) {
            stmt.bindLong(3, versionWeb);
        }
 
        Integer version = entity.getVersion();
        if (version != null) {
            stmt.bindLong(4, version);
        }
 
        Long idWeb = entity.getIdWeb();
        if (idWeb != null) {
            stmt.bindLong(5, idWeb);
        }
        stmt.bindLong(6, entity.getEstaSincronizado() ? 1L: 0L);
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(7, descripcion);
        }
 
        String aclaracion = entity.getAclaracion();
        if (aclaracion != null) {
            stmt.bindString(8, aclaracion);
        }
 
        String inicio = entity.getInicio();
        if (inicio != null) {
            stmt.bindString(9, inicio);
        }
 
        String fin = entity.getFin();
        if (fin != null) {
            stmt.bindString(10, fin);
        }
        stmt.bindLong(11, entity.getEsDeCarga() ? 1L: 0L);
    }

    @Override
    protected void attachEntity(Rutina entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Rutina readEntity(Cursor cursor, int offset) {
        Rutina entity = new Rutina( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // idUsuario
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // versionWeb
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // version
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // idWeb
            cursor.getShort(offset + 5) != 0, // estaSincronizado
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // descripcion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // aclaracion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // inicio
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fin
            cursor.getShort(offset + 10) != 0 // esDeCarga
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Rutina entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdUsuario(cursor.getString(offset + 1));
        entity.setVersionWeb(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setVersion(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIdWeb(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setEstaSincronizado(cursor.getShort(offset + 5) != 0);
        entity.setDescripcion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAclaracion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setInicio(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFin(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEsDeCarga(cursor.getShort(offset + 10) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Rutina entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Rutina entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
