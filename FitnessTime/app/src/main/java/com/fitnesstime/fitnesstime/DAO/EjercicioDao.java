package com.fitnesstime.fitnesstime.DAO;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.fitnesstime.fitnesstime.Dominio.Ejercicio;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EJERCICIO".
*/
public class EjercicioDao extends AbstractDao<Ejercicio, Long> {

    public static final String TABLENAME = "EJERCICIO";

    /**
     * Properties of entity Ejercicio.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RutinaId = new Property(1, long.class, "rutinaId", false, "RUTINA_ID");
    };

    private Query<Ejercicio> rutina_EjercicioListQuery;

    public EjercicioDao(DaoConfig config) {
        super(config);
    }
    
    public EjercicioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EJERCICIO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"RUTINA_ID\" INTEGER NOT NULL );"); // 1: rutinaId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EJERCICIO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Ejercicio entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getRutinaId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Ejercicio readEntity(Cursor cursor, int offset) {
        Ejercicio entity = new Ejercicio( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1) // rutinaId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Ejercicio entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRutinaId(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Ejercicio entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Ejercicio entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "ejercicioList" to-many relationship of Rutina. */
    public List<Ejercicio> _queryRutina_EjercicioList(long rutinaId) {
        synchronized (this) {
            if (rutina_EjercicioListQuery == null) {
                QueryBuilder<Ejercicio> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RutinaId.eq(null));
                rutina_EjercicioListQuery = queryBuilder.build();
            }
        }
        Query<Ejercicio> query = rutina_EjercicioListQuery.forCurrentThread();
        query.setParameter(0, rutinaId);
        return query.list();
    }

}
